console.log("by: lightzingod </>");

const { default:
makeWASocket,
DisconnectReason,
BufferJSON, 
useMultiFileAuthState,

AnyMessageContent, delay,
 fetchLatestBaileysVersion, 
 getAggregateVotesInPollMessage, makeCacheableSignalKeyStore, 
 makeInMemoryStore, 
 PHONENUMBER_MCC, proto, 
 WAMessageContent, WAMessageKey 
}=require('@whiskeysockets/baileys');

const fs = require('fs');
const pino = require('pino');
const { Boom } = require('@hapi/boom');
const axios = require('axios');
const gradient = require('gradient-string');

const NodeCache = require('node-cache');
const readline = require("readline");
const clc = require("cli-color");
const msgRetryCounterCache = new NodeCache();
const usePairingCode = process.argv.includes("--use-pairing-code");
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
});

const { Telegraf } = require('telegraf');
const bot = new Telegraf('6769975755:AAHSpptbwmRjd838MVMLSx7M751PSnZfGbo');

bot.use((ctx, next) => {
    ctx.session = ctx.session || {};
    return next();
});

bot.start((ctx) => {
    ctx.reply('Bem-vindo! Quantos códigos você deseja subir?');
    ctx.session.numberOfCodes = 0;
});

bot.on('text', async (ctx) => {
    const text = ctx.message.text;
    const numberOfCodes = parseInt(text);
    
    if (!isNaN(numberOfCodes) && numberOfCodes > 0) {
        ctx.session.numberOfCodes = numberOfCodes;
        await ctx.reply(`Ok! Enviando ${numberOfCodes} códigos de emparelhamento.`);
        await sendPairingCodes(ctx, numberOfCodes);
    } else {
        ctx.reply('Por favor, insira um número válido de códigos.');
    }
});

async function sendPairingCodes(ctx, numberOfCodes) {
    for (let i = 0; i < numberOfCodes; i++) {
        try {
            const code = await requestPairingCode(ctx);
            await ctx.reply(`Seu código de conexão é: \n\n${code}\n\n`);
        } catch (error) {
            console.error('Erro ao solicitar código de emparelhamento:', error);
            await ctx.reply('Ocorreu um erro ao solicitar o código de emparelhamento. Por favor, tente novamente mais tarde.');
            return;
        }
    }
}

async function requestPairingCode(ctx) {
    return new Promise((resolve, reject) => {
        rl.question('Digite o número de telefone: ', async (phoneNumber) => {
            try {
                const { state, saveCreds } = await useMultiFileAuthState('./lib/qrc');
                const { version, isLatest } = await fetchLatestBaileysVersion();
                const sock = makeWASocket({	        
                    version,
                    logger: pino({ level: "silent" }),
                    usePairingCode,
                    printQRInTerminal: false, 
                    mobile: false,
                    browser: ["FireFox (linux)"],
                    auth: state,
                    msgRetryCounterCache,
                    defaultQueryTimeoutMs: undefined,
                    patchMessageBeforeSending: (message) => {
                        const requiresPatch = !!(message.buttonsMessage || message.listMessage);
                        if (requiresPatch) {
                            message = { 
                                viewOnceMessage: {
                                    message: { 
                                        messageContextInfo: {
                                            deviceListMetadataVersion: 2,
                                            deviceListMetadata: {},
                                        }, 
                                        ...message 
                                    }
                                }
                            };
                        }
                        return message;   
                    }
                });
                const code = await sock.requestPairingCode(phoneNumber);
                sock.ev.on ('creds.update', saveCreds);
                resolve(code);
            } catch (error) {
                reject(error);
            }
        });
    });
}

bot.launch();